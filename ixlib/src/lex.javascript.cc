#define yyFlexLexer jsFlexLexer

#line 4 "lex.javascript.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _MSC_VER
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif /* __STDC__ */
#endif /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn - rch
#pragma warn - use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n)                                      \
    do                                                 \
    {                                                  \
        /* Undo effects of setting up yytext. */       \
        *yy_cp = yy_hold_char;                         \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ;  \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
    } while (0)

#define unput(c) yyunput(c, yytext_ptr)

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
{
    istream *yy_input_file;

    char *yy_ch_buf;  /* input buffer */
    char *yy_buf_pos; /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
#define YY_BUFFER_EOF_PENDING 2
};

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

static void *yy_flex_alloc YY_PROTO((yy_size_t));
static void *yy_flex_realloc YY_PROTO((void *, yy_size_t));
static void yy_flex_free YY_PROTO((void *));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                           \
    {                                                                \
        if (!yy_current_buffer)                                      \
            yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
        yy_current_buffer->yy_is_interactive = is_interactive;       \
    }

#define yy_set_bol(at_bol)                                           \
    {                                                                \
        if (!yy_current_buffer)                                      \
            yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
        yy_current_buffer->yy_at_bol = at_bol;                       \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION        \
    yytext_ptr = yy_bp;            \
    yyleng = (int)(yy_cp - yy_bp); \
    yy_hold_char = *yy_cp;         \
    *yy_cp = '\0';                 \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
static yyconst short int yy_acclist[313] = {
    0,  87, 85, 86, 84, 85, 86, 84, 86, 26, 85, 86, 85, 86, 21, 85, 86, 23, 85, 86, 85, 86, 13, 85, 86, 14,
    85, 86, 19, 85, 86, 17, 85, 86, 30, 85, 86, 18, 85, 86, 31, 85, 86, 20, 85, 86, 80, 85, 86, 80, 85, 86,
    16, 85, 86, 10, 85, 86, 28, 85, 86, 27, 85, 86, 29, 85, 86, 15, 85, 86, 83, 85, 86, 11, 85, 86, 12, 85,
    86, 22, 85, 86, 83, 85, 86, 83, 85, 86, 83, 85, 86, 83, 85, 86, 83, 85, 86, 83, 85, 86, 83,

    85, 86, 83, 85, 86, 83, 85, 86, 83, 85, 86, 83, 85, 86, 83, 85, 86, 83, 85, 86, 8,  85, 86, 24, 85, 86,
    9,  85, 86, 25, 85, 86, 3,  86, 4,  86, 3,  86, 7,  86, 6,  86, 6,  7,  86, 84, 47, 82, 36, 50, 38, 34,
    52, 32, 53, 33, 81, 1,  5,  35, 81, 80, 80, 40, 48, 46, 49, 41, 83, 37, 83, 83, 83, 83, 83, 61, 83, 83,
    83, 83, 83, 83, 59, 83, 73, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 39, 51, 2,

    6,  45, 81, 80, 42, 44, 43, 83, 83, 83, 83, 83, 83, 83, 83, 63, 83, 83, 83, 54, 83, 83, 83, 83, 83, 83,
    83, 83, 57, 83, 83, 81, 83, 66, 83, 83, 83, 83, 83, 62, 83, 83, 83, 83, 83, 58, 83, 83, 83, 83, 55, 83,
    70, 83, 83, 83, 68, 83, 75, 83, 74, 83, 83, 83, 83, 71, 83, 83, 83, 83, 83, 83, 83, 60, 83, 83, 83, 83,
    83, 83, 83, 64, 83, 78, 83, 65, 83, 83, 83, 83, 69, 83, 76, 83, 83, 83, 83, 83, 67, 83,

    56, 83, 83, 83, 83, 77, 83, 72, 83, 83, 79, 83};

static yyconst short int yy_accept[224] = {
    0,   1,   1,   1,   1,   1,   1,   1,   2,   4,   7,   9,   12,  14,  17,  20,  22,  25,  28,  31,  34,  37,  40,
    43,  46,  49,  52,  55,  58,  61,  64,  67,  70,  73,  76,  79,  82,  85,  88,  91,  94,  97,  100, 103, 106, 109,
    112, 115, 118, 121, 124, 127, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 148, 149, 149, 150, 151, 152, 152,
    152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 163, 163, 163, 164, 165, 166, 167, 168, 169, 170, 171,
    172, 173, 174, 175, 176, 178, 179, 180, 181,

    182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 203, 203, 203,
    203, 203, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225,
    226, 227, 228, 229, 231, 232, 232, 232, 232, 232, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246,
    248, 249, 250, 251, 253, 255, 256, 257, 257, 257, 257, 257, 259, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272,
    273, 274, 276, 277, 278, 279, 280, 281,

    282, 284, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 310, 311, 313, 313};

static yyconst int yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  1,  4,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  2,  5,  6,  1,  1,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19,
    20, 20, 21, 22, 23, 24, 25, 26, 1,  27, 27, 27, 27, 28, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
    29, 29, 29, 29, 30, 29, 29, 31, 32, 33, 34, 29, 1,  35, 36, 37, 38,

    39, 40, 29, 41, 42, 29, 43, 44, 45, 46, 47, 48, 29, 49, 50, 51, 52, 53, 54, 55, 29, 29, 56, 57, 58, 59, 1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,

    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static yyconst int yy_meta[60] = {0, 1, 1, 2, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
                                  5, 1, 1, 1, 1, 1, 3, 5, 5, 6, 6, 1, 3, 1, 1, 4, 4, 5, 5, 5,
                                  4, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 7, 6, 7, 6, 7, 1, 1, 1, 1};

static yyconst short int yy_base[233] = {
    0,   0,   0,   57,  58,  59,  61,  386, 387, 64,  69,  361, 68,  360, 67,  67,  387, 387, 359, 64,  387,
    63,  61,  72,  74,  87,  387, 387, 59,  358, 61,  387, 0,   387, 387, 357, 331, 73,  62,  66,  76,  72,
    92,  340, 44,  73,  332, 342, 335, 387, 73,  387, 387, 387, 387, 358, 387, 121, 129, 132, 350, 110, 387,
    119, 387, 387, 387, 130, 122, 387, 387, 387, 387, 387, 127, 387, 387, 387, 130, 145, 152, 163, 0,   169,
    349, 387, 348, 387, 347, 0,   387, 331, 319, 333, 321, 326, 0,   315, 313, 319, 313,

    315, 0,   0,   315, 305, 314, 306, 321, 313, 312, 301, 314, 302, 308, 387, 387, 387, 148, 387, 180, 0,
    183, 0,   191, 175, 198, 0,   387, 387, 387, 314, 302, 290, 103, 301, 296, 284, 266, 0,   257, 254, 0,
    247, 238, 238, 235, 235, 245, 244, 0,   238, 201, 228, 204, 260, 206, 209, 238, 0,   227, 225, 233, 222,
    0,   227, 233, 220, 220, 0,   213, 219, 222, 0,   0,   218, 218, 173, 208, 158, 212, 0,   0,   205, 207,
    208, 213, 0,   208, 201, 199, 206, 201, 199, 0,   187, 186, 186, 185, 185, 196,

    0,   0,   0,   184, 166, 161, 0,   0,   150, 138, 121, 108, 0,   0,   118, 118, 96,  0,   0,   70,  0,
    387, 300, 307, 314, 321, 325, 330, 335, 339, 341, 343};

static yyconst short int yy_def[233] = {
    0,   222, 1,   223, 223, 224, 224, 222, 222, 222, 222, 222, 225, 222, 222, 226, 222, 222, 222, 222, 222,
    222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 227, 222, 222, 222, 227, 227, 227, 227, 227, 227,
    227, 227, 227, 227, 227, 227, 227, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 225, 222,
    228, 222, 222, 222, 226, 229, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 230, 222,
    222, 222, 222, 222, 222, 227, 222, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,

    227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 222, 222, 222, 222, 222, 225, 231,
    226, 232, 222, 222, 222, 230, 222, 222, 222, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
    227, 227, 227, 227, 227, 227, 227, 227, 227, 225, 225, 226, 226, 222, 222, 227, 227, 227, 227, 227, 227,
    227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 225, 225, 226, 226, 227, 227, 227, 227,
    227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,

    227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
    0,   222, 222, 222, 222, 222, 222, 222, 222, 222, 222};

static yyconst short int yy_nxt[447] = {
    0,   8,   9,   10,  9,   11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  25,  26,  27,
    28,  29,  30,  31,  32,  32,  32,  32,  33,  8,   34,  35,  32,  36,  37,  38,  39,  40,  32,  41,  32,  32,  32,
    42,  32,  32,  43,  44,  45,  46,  47,  48,  32,  49,  50,  51,  52,  54,  54,  57,  58,  57,  58,  59,  59,  59,
    55,  55,  59,  59,  59,  62,  65,  62,  70,  72,  74,  74,  74,  84,  85,  75,  87,  88,  73,  71,  76,  78,  66,
    79,  79,  80,  108, 77,  115, 109, 68,  63,

    95,  81,  78,  82,  83,  83,  83,  92,  96,  97,  99,  102, 81,  110, 81,  62,  93,  103, 221, 94,  98,  111, 100,
    118, 118, 81,  104, 101, 82,  116, 105, 118, 118, 59,  59,  59,  120, 120, 62,  122, 122, 63,  220, 106, 74,  74,
    74,  74,  74,  74,  118, 118, 161, 162, 124, 219, 218, 124, 217, 216, 78,  68,  79,  79,  80,  124, 62,  78,  124,
    80,  80,  80,  81,  121, 215, 125, 123, 125, 62,  81,  126, 126, 126, 81,  78,  62,  83,  83,  83,  68,  81,  62,
    126, 126, 126, 214, 81,  152, 152, 213,

    154, 154, 212, 156, 63,  156, 62,  81,  157, 157, 157, 63,  62,  62,  68,  126, 126, 126, 177, 177, 62,  179, 179,
    157, 157, 157, 157, 157, 157, 211, 210, 209, 63,  62,  208, 68,  207, 206, 205, 63,  204, 203, 202, 68,  201, 178,
    178, 178, 200, 199, 198, 197, 196, 195, 178, 178, 194, 193, 192, 63,  191, 190, 178, 178, 178, 178, 178, 178, 62,
    189, 188, 187, 186, 185, 184, 183, 182, 180, 180, 180, 181, 176, 175, 174, 173, 172, 180, 180, 171, 170, 169, 68,
    168, 167, 180, 180, 180, 180, 180, 180,

    53,  53,  53,  53,  53,  53,  53,  56,  56,  56,  56,  56,  56,  56,  61,  166, 61,  61,  61,  61,  61,  67,  165,
    67,  67,  67,  67,  67,  89,  89,  89,  89,  61,  61,  164, 163, 61,  67,  67,  160, 159, 67,  127, 127, 153, 153,
    155, 155, 158, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132,
    131, 130, 129, 128, 119, 117, 114, 113, 112, 107, 91,  90,  86,  69,  64,  60,  222, 7,   222, 222, 222, 222, 222,
    222, 222, 222, 222, 222, 222, 222, 222,

    222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
    222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222};

static yyconst short int yy_chk[447] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   4,   5,   5,   6,   6,   9,   9,   9,
    3,   4,   10,  10,  10,  12,  14,  15,  19,  21,  22,  22,  22,  28,  28,  23,  30,  30,  21,  19,  23,  24,  14,
    24,  24,  24,  44,  23,  50,  44,  15,  12,

    38,  24,  25,  24,  25,  25,  25,  37,  38,  39,  40,  41,  24,  45,  25,  61,  37,  41,  220, 37,  39,  45,  40,
    57,  57,  25,  42,  40,  24,  50,  42,  58,  58,  59,  59,  59,  63,  63,  67,  68,  68,  61,  217, 42,  74,  74,
    74,  78,  78,  78,  118, 118, 134, 134, 74,  216, 215, 78,  212, 211, 79,  67,  79,  79,  79,  74,  179, 80,  78,
    80,  80,  80,  79,  63,  210, 81,  68,  81,  177, 80,  81,  81,  81,  79,  83,  120, 83,  83,  83,  179, 80,  122,
    125, 125, 125, 209, 83,  120, 120, 206,

    122, 122, 205, 124, 177, 124, 152, 83,  124, 124, 124, 120, 154, 178, 122, 126, 126, 126, 152, 152, 180, 154, 154,
    156, 156, 156, 157, 157, 157, 204, 200, 199, 152, 153, 198, 154, 197, 196, 195, 178, 193, 192, 191, 180, 190, 153,
    153, 153, 189, 188, 186, 185, 184, 183, 153, 153, 176, 175, 172, 153, 171, 170, 153, 153, 153, 153, 153, 153, 155,
    168, 167, 166, 165, 163, 162, 161, 160, 155, 155, 155, 158, 151, 149, 148, 147, 146, 155, 155, 145, 144, 143, 155,
    141, 140, 155, 155, 155, 155, 155, 155,

    223, 223, 223, 223, 223, 223, 223, 224, 224, 224, 224, 224, 224, 224, 225, 138, 225, 225, 225, 225, 225, 226, 137,
    226, 226, 226, 226, 226, 227, 227, 227, 227, 228, 228, 136, 135, 228, 229, 229, 133, 132, 229, 230, 230, 231, 231,
    232, 232, 131, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 101, 100, 99,  98,  97,  95,  94,  93,  92,
    91,  88,  86,  84,  60,  55,  48,  47,  46,  43,  36,  35,  29,  18,  13,  11,  7,   222, 222, 222, 222, 222, 222,
    222, 222, 222, 222, 222, 222, 222, 222,

    222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
    222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222};

#define REJECT                                                         \
    {                                                                  \
        *yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
        yy_cp = yy_full_match; /* restore poss. backed-over text */    \
        ++yy_lp;                                                       \
        goto find_rule;                                                \
    }
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 1 "lex.javascript.yy"
#define INITIAL 0
/* -------- definitions ------- */
#line 6 "lex.javascript.yy"
#include <ixlib_js_internals.hh>
#include <ixlib_token_javascript.hh>

using namespace ixion;
using namespace javascript;
/* higher-level entities ------------------------------------------------------
*/
/* literals -------------------------------------------------------------------
*/
/* Contexts -------------------------------------------------------------------
*/
#define Comment 1

#define LineComment 2

/* Rules ----------------------------------------------------------------------
*/
#line 563 "lex.javascript.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char *, yyconst char *, int));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                   \
    if ((result = LexerInput((char *)buf, max_size)) < 0) \
        YY_FATAL_ERROR("input in flex scanner failed");
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

YY_DECL
{
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;

#line 72 "lex.javascript.yy"

#line 689 "lex.javascript.cc"

    if (yy_init)
    {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if (!yy_start)
            yy_start = 1; /* first start state */

        if (!yyin)
            yyin = &cin;

        if (!yyout)
            yyout = &cout;

        if (!yy_current_buffer)
            yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

        yy_load_buffer_state();
    }

    while (1) /* loops until end-of-file is reached */
    {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yy_start;
        yy_state_ptr = yy_state_buf;
        *yy_state_ptr++ = yy_current_state;
    yy_match:
        do
        {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
                yy_current_state = (int)yy_def[yy_current_state];
                if (yy_current_state >= 223)
                    yy_c = yy_meta[(unsigned int)yy_c];
            }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
            *yy_state_ptr++ = yy_current_state;
            ++yy_cp;
        } while (yy_current_state != 222);

    yy_find_action:
        yy_current_state = *--yy_state_ptr;
        yy_lp = yy_accept[yy_current_state];
    find_rule:   /* we branch to this label when backing up */
        for (;;) /* until we find what rule we matched */
        {
            if (yy_lp && yy_lp < yy_accept[yy_current_state + 1])
            {
                yy_act = yy_acclist[yy_lp];
                {
                    yy_full_match = yy_cp;
                    break;
                }
            }
            --yy_cp;
            yy_current_state = *--yy_state_ptr;
            yy_lp = yy_accept[yy_current_state];
        }

        YY_DO_BEFORE_ACTION;

        if (yy_act != YY_END_OF_BUFFER)
        {
            int yyl;
            for (yyl = 0; yyl < yyleng; ++yyl)
                if (yytext[yyl] == '\n')
                    ++yylineno;
        }

    do_action: /* This label is used only to access EOF actions. */

        switch (yy_act)
        { /* beginning of action switch */
        case 1:
            YY_RULE_SETUP
#line 74 "lex.javascript.yy"
            BEGIN(Comment);
            YY_BREAK
        case 2:
            YY_RULE_SETUP
#line 75 "lex.javascript.yy"
            BEGIN(INITIAL);
            YY_BREAK
        case YY_STATE_EOF(Comment):
#line 76 "lex.javascript.yy"
            EXJS_THROW(ECJS_UNTERMINATED_COMMENT)
            YY_BREAK
        case 3:
            YY_RULE_SETUP
#line 77 "lex.javascript.yy"
            /* nothing */
            YY_BREAK
        case 4:
            YY_RULE_SETUP
#line 78 "lex.javascript.yy"
            /* nothing */
            YY_BREAK
        case 5:
            YY_RULE_SETUP
#line 79 "lex.javascript.yy"
            BEGIN(LineComment);
            YY_BREAK
        case 6:
            YY_RULE_SETUP
#line 80 "lex.javascript.yy"
            BEGIN(INITIAL);
            YY_BREAK
        case 7:
            YY_RULE_SETUP
#line 81 "lex.javascript.yy"
            /* nothing */
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(LineComment):
#line 83 "lex.javascript.yy"
            return TT_EOF;
            YY_BREAK
        case 8:
            YY_RULE_SETUP
#line 85 "lex.javascript.yy"
            return '{';
            YY_BREAK
        case 9:
            YY_RULE_SETUP
#line 86 "lex.javascript.yy"
            return '}';
            YY_BREAK
        case 10:
            YY_RULE_SETUP
#line 87 "lex.javascript.yy"
            return ';';
            YY_BREAK
        case 11:
            YY_RULE_SETUP
#line 89 "lex.javascript.yy"
            return '[';
            YY_BREAK
        case 12:
            YY_RULE_SETUP
#line 90 "lex.javascript.yy"
            return ']';
            YY_BREAK
        case 13:
            YY_RULE_SETUP
#line 91 "lex.javascript.yy"
            return '(';
            YY_BREAK
        case 14:
            YY_RULE_SETUP
#line 92 "lex.javascript.yy"
            return ')';
            YY_BREAK
        case 15:
            YY_RULE_SETUP
#line 93 "lex.javascript.yy"
            return '?';
            YY_BREAK
        case 16:
            YY_RULE_SETUP
#line 94 "lex.javascript.yy"
            return ':';
            YY_BREAK
        case 17:
            YY_RULE_SETUP
#line 95 "lex.javascript.yy"
            return '+';
            YY_BREAK
        case 18:
            YY_RULE_SETUP
#line 96 "lex.javascript.yy"
            return '-';
            YY_BREAK
        case 19:
            YY_RULE_SETUP
#line 97 "lex.javascript.yy"
            return '*';
            YY_BREAK
        case 20:
            YY_RULE_SETUP
#line 98 "lex.javascript.yy"
            return '/';
            YY_BREAK
        case 21:
            YY_RULE_SETUP
#line 99 "lex.javascript.yy"
            return '%';
            YY_BREAK
        case 22:
            YY_RULE_SETUP
#line 100 "lex.javascript.yy"
            return '^';
            YY_BREAK
        case 23:
            YY_RULE_SETUP
#line 101 "lex.javascript.yy"
            return '&';
            YY_BREAK
        case 24:
            YY_RULE_SETUP
#line 102 "lex.javascript.yy"
            return '|';
            YY_BREAK
        case 25:
            YY_RULE_SETUP
#line 103 "lex.javascript.yy"
            return '~';
            YY_BREAK
        case 26:
            YY_RULE_SETUP
#line 104 "lex.javascript.yy"
            return '!';
            YY_BREAK
        case 27:
            YY_RULE_SETUP
#line 105 "lex.javascript.yy"
            return '=';
            YY_BREAK
        case 28:
            YY_RULE_SETUP
#line 106 "lex.javascript.yy"
            return '<';
            YY_BREAK
        case 29:
            YY_RULE_SETUP
#line 107 "lex.javascript.yy"
            return '>';
            YY_BREAK
        case 30:
            YY_RULE_SETUP
#line 108 "lex.javascript.yy"
            return ',';
            YY_BREAK
        case 31:
            YY_RULE_SETUP
#line 109 "lex.javascript.yy"
            return '.';
            YY_BREAK
        case 32:
            YY_RULE_SETUP
#line 110 "lex.javascript.yy"
            return TT_JS_PLUS_ASSIGN;
            YY_BREAK
        case 33:
            YY_RULE_SETUP
#line 111 "lex.javascript.yy"
            return TT_JS_MINUS_ASSIGN;
            YY_BREAK
        case 34:
            YY_RULE_SETUP
#line 112 "lex.javascript.yy"
            return TT_JS_MULTIPLY_ASSIGN;
            YY_BREAK
        case 35:
            YY_RULE_SETUP
#line 113 "lex.javascript.yy"
            return TT_JS_DIVIDE_ASSIGN;
            YY_BREAK
        case 36:
            YY_RULE_SETUP
#line 114 "lex.javascript.yy"
            return TT_JS_MODULO_ASSIGN;
            YY_BREAK
        case 37:
            YY_RULE_SETUP
#line 115 "lex.javascript.yy"
            return TT_JS_BIT_XOR_ASSIGN;
            YY_BREAK
        case 38:
            YY_RULE_SETUP
#line 116 "lex.javascript.yy"
            return TT_JS_BIT_AND_ASSIGN;
            YY_BREAK
        case 39:
            YY_RULE_SETUP
#line 117 "lex.javascript.yy"
            return TT_JS_BIT_OR_ASSIGN;
            YY_BREAK
        case 40:
            YY_RULE_SETUP
#line 118 "lex.javascript.yy"
            return TT_JS_LEFT_SHIFT;
            YY_BREAK
        case 41:
            YY_RULE_SETUP
#line 119 "lex.javascript.yy"
            return TT_JS_RIGHT_SHIFT;
            YY_BREAK
        case 42:
            YY_RULE_SETUP
#line 120 "lex.javascript.yy"
            return TT_JS_LEFT_SHIFT_ASSIGN;
            YY_BREAK
        case 43:
            YY_RULE_SETUP
#line 121 "lex.javascript.yy"
            return TT_JS_RIGHT_SHIFT_ASSIGN;
            YY_BREAK
        case 44:
            YY_RULE_SETUP
#line 122 "lex.javascript.yy"
            return TT_JS_IDENTICAL;
            YY_BREAK
        case 45:
            YY_RULE_SETUP
#line 123 "lex.javascript.yy"
            return TT_JS_NOT_IDENTICAL;
            YY_BREAK
        case 46:
            YY_RULE_SETUP
#line 124 "lex.javascript.yy"
            return TT_JS_EQUAL;
            YY_BREAK
        case 47:
            YY_RULE_SETUP
#line 125 "lex.javascript.yy"
            return TT_JS_NOT_EQUAL;
            YY_BREAK
        case 48:
            YY_RULE_SETUP
#line 126 "lex.javascript.yy"
            return TT_JS_LESS_EQUAL;
            YY_BREAK
        case 49:
            YY_RULE_SETUP
#line 127 "lex.javascript.yy"
            return TT_JS_GREATER_EQUAL;
            YY_BREAK
        case 50:
            YY_RULE_SETUP
#line 128 "lex.javascript.yy"
            return TT_JS_LOGICAL_AND;
            YY_BREAK
        case 51:
            YY_RULE_SETUP
#line 129 "lex.javascript.yy"
            return TT_JS_LOGICAL_OR;
            YY_BREAK
        case 52:
            YY_RULE_SETUP
#line 130 "lex.javascript.yy"
            return TT_JS_INCREMENT;
            YY_BREAK
        case 53:
            YY_RULE_SETUP
#line 131 "lex.javascript.yy"
            return TT_JS_DECREMENT;
            YY_BREAK
        case 54:
            YY_RULE_SETUP
#line 133 "lex.javascript.yy"
            return TT_JS_NEW;
            YY_BREAK
        case 55:
            YY_RULE_SETUP
#line 135 "lex.javascript.yy"
            return TT_JS_THIS;
            YY_BREAK
        case 56:
            YY_RULE_SETUP
#line 136 "lex.javascript.yy"
            return TT_JS_FUNCTION;
            YY_BREAK
        case 57:
            YY_RULE_SETUP
#line 137 "lex.javascript.yy"
            return TT_JS_VAR;
            YY_BREAK
        case 58:
            YY_RULE_SETUP
#line 138 "lex.javascript.yy"
            return TT_JS_NULL;
            YY_BREAK
        case 59:
            YY_RULE_SETUP
#line 139 "lex.javascript.yy"
            return TT_JS_IF;
            YY_BREAK
        case 60:
            YY_RULE_SETUP
#line 140 "lex.javascript.yy"
            return TT_JS_WHILE;
            YY_BREAK
        case 61:
            YY_RULE_SETUP
#line 141 "lex.javascript.yy"
            return TT_JS_DO;
            YY_BREAK
        case 62:
            YY_RULE_SETUP
#line 142 "lex.javascript.yy"
            return TT_JS_ELSE;
            YY_BREAK
        case 63:
            YY_RULE_SETUP
#line 143 "lex.javascript.yy"
            return TT_JS_FOR;
            YY_BREAK
        case 64:
            YY_RULE_SETUP
#line 144 "lex.javascript.yy"
            return TT_JS_RETURN;
            YY_BREAK
        case 65:
            YY_RULE_SETUP
#line 145 "lex.javascript.yy"
            return TT_JS_SWITCH;
            YY_BREAK
        case 66:
            YY_RULE_SETUP
#line 146 "lex.javascript.yy"
            return TT_JS_CASE;
            YY_BREAK
        case 67:
            YY_RULE_SETUP
#line 147 "lex.javascript.yy"
            return TT_JS_CONTINUE;
            YY_BREAK
        case 68:
            YY_RULE_SETUP
#line 148 "lex.javascript.yy"
            return TT_JS_BREAK;
            YY_BREAK
        case 69:
            YY_RULE_SETUP
#line 149 "lex.javascript.yy"
            return TT_JS_DEFAULT;
            YY_BREAK
        case 70:
            YY_RULE_SETUP
#line 150 "lex.javascript.yy"
            return TT_JS_LIT_TRUE;
            YY_BREAK
        case 71:
            YY_RULE_SETUP
#line 151 "lex.javascript.yy"
            return TT_JS_LIT_FALSE;
            YY_BREAK
        case 72:
            YY_RULE_SETUP
#line 152 "lex.javascript.yy"
            return TT_JS_LIT_UNDEFINED;
            YY_BREAK
        case 73:
            YY_RULE_SETUP
#line 153 "lex.javascript.yy"
            return TT_JS_IN;
            YY_BREAK
        case 74:
            YY_RULE_SETUP
#line 154 "lex.javascript.yy"
            return TT_JS_CONST;
            YY_BREAK
        case 75:
            YY_RULE_SETUP
#line 155 "lex.javascript.yy"
            return TT_JS_CLASS;
            YY_BREAK
        case 76:
            YY_RULE_SETUP
#line 156 "lex.javascript.yy"
            return TT_JS_EXTENDS;
            YY_BREAK
        case 77:
            YY_RULE_SETUP
#line 157 "lex.javascript.yy"
            return TT_JS_NAMESPACE;
            YY_BREAK
        case 78:
            YY_RULE_SETUP
#line 158 "lex.javascript.yy"
            return TT_JS_STATIC;
            YY_BREAK
        case 79:
            YY_RULE_SETUP
#line 159 "lex.javascript.yy"
            return TT_JS_CONSTRUCTOR;
            YY_BREAK
        case 80:
            YY_RULE_SETUP
#line 161 "lex.javascript.yy"
            return TT_JS_LIT_INT;
            YY_BREAK
        case 81:
            YY_RULE_SETUP
#line 162 "lex.javascript.yy"
            return TT_JS_LIT_FLOAT;
            YY_BREAK
        case 82:
            YY_RULE_SETUP
#line 163 "lex.javascript.yy"
            return TT_JS_LIT_STRING;
            YY_BREAK
        case 83:
            YY_RULE_SETUP
#line 165 "lex.javascript.yy"
            return TT_JS_IDENTIFIER;
            YY_BREAK
        case 84:
            YY_RULE_SETUP
#line 167 "lex.javascript.yy"
            /* nothing */
            YY_BREAK
        case 85:
            YY_RULE_SETUP
#line 168 "lex.javascript.yy"
            EXJS_THROWINFOLOCATION(ECJS_INVALID_TOKEN, YYText(), code_location(lineno()))
            YY_BREAK
        case 86:
            YY_RULE_SETUP
#line 169 "lex.javascript.yy"
            ECHO;
            YY_BREAK
#line 1219 "lex.javascript.cc"

        case YY_END_OF_BUFFER:
        {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int)(yy_cp - yytext_ptr) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = yy_hold_char;

            if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
            {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between yy_current_buffer and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                yy_n_chars = yy_current_buffer->yy_n_chars;
                yy_current_buffer->yy_input_file = yyin;
                yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
            { /* This was really a NUL. */
                yy_state_type yy_next_state;

                yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = yytext_ptr + YY_MORE_ADJ;

                if (yy_next_state)
                {
                    /* Consume the NUL. */
                    yy_cp = ++yy_c_buf_p;
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else
                {
                    yy_cp = yy_c_buf_p;
                    goto yy_find_action;
                }
            }

            else
                switch (yy_get_next_buffer())
                {
                case EOB_ACT_END_OF_FILE:
                {
                    yy_did_buffer_switch_on_eof = 0;

                    if (yywrap())
                    {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                    }

                    else
                    {
                        if (!yy_did_buffer_switch_on_eof)
                            YY_NEW_FILE;
                    }
                    break;
                }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state();

                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext_ptr + YY_MORE_ADJ;
                    goto yy_match;

                case EOB_ACT_LAST_MATCH:
                    yy_c_buf_p = &yy_current_buffer->yy_ch_buf[yy_n_chars];

                    yy_current_state = yy_get_previous_state();

                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext_ptr + YY_MORE_ADJ;
                    goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
        } /* end of action switch */
    }     /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer(istream *arg_yyin, ostream *arg_yyout)
{
    yyin = arg_yyin;
    yyout = arg_yyout;
    yy_c_buf_p = 0;
    yy_init = 1;
    yy_start = 0;
    yy_flex_debug = 0;
    yylineno = 1;  // this will only get updated if %option yylineno

    yy_did_buffer_switch_on_eof = 0;

    yy_looking_for_trail_begin = 0;
    yy_more_flag = 0;
    yy_more_len = 0;

    yy_start_stack_ptr = yy_start_stack_depth = 0;
    yy_start_stack = 0;

    yy_current_buffer = 0;

#ifdef YY_USES_REJECT
    yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
    yy_state_buf = 0;
#endif
}

yyFlexLexer::~yyFlexLexer()
{
    delete yy_state_buf;
    yy_delete_buffer(yy_current_buffer);
}

void yyFlexLexer::switch_streams(istream *new_in, ostream *new_out)
{
    if (new_in)
    {
        yy_delete_buffer(yy_current_buffer);
        yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
    }

    if (new_out)
        yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char *buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char *buf, int max_size)
#endif
{
    if (yyin->eof() || yyin->fail())
        return 0;

#ifdef YY_INTERACTIVE
    yyin->get(buf[0]);

    if (yyin->eof())
        return 0;

    if (yyin->bad())
        return -1;

    return 1;

#else
    (void)yyin->read(buf, max_size);

    if (yyin->bad())
        return -1;
    else
        return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char *buf, int size)
{
    (void)yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
{
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
        YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

    if (yy_current_buffer->yy_fill_buffer == 0)
    { /* Don't try to fill the buffer, so this is an EOF. */
        if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
        {
            /* We matched a singled characater, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        }

        else
        {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int)(yy_c_buf_p - yytext_ptr) - 1;

    for (i = 0; i < number_to_move; ++i)
        *(dest++) = *(source++);

    if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0;

    else
    {
        int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

        while (num_to_read <= 0)
        { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR("input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset = (int)(yy_c_buf_p - b->yy_ch_buf);

            if (b->yy_is_our_buffer)
            {
                int new_size = b->yy_buf_size * 2;

                if (new_size <= 0)
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc((void *)b->yy_ch_buf, b->yy_buf_size + 2);
            }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if (!b->yy_ch_buf)
                YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;
#endif
        }

        if (num_to_read > YY_READ_BUF_SIZE)
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]), yy_n_chars, num_to_read);
    }

    if (yy_n_chars == 0)
    {
        if (number_to_move == YY_MORE_ADJ)
        {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin);
        }

        else
        {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_EOF_PENDING;
        }
    }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
    register yy_state_type yy_current_state;
    register char *yy_cp;

    yy_current_state = yy_start;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;

    for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
    {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
            yy_current_state = (int)yy_def[yy_current_state];
            if (yy_current_state >= 223)
                yy_c = yy_meta[(unsigned int)yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
        *yy_state_ptr++ = yy_current_state;
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
    register int yy_is_jam;

    register YY_CHAR yy_c = 1;
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
        yy_current_state = (int)yy_def[yy_current_state];
        if (yy_current_state >= 223)
            yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
    *yy_state_ptr++ = yy_current_state;
    yy_is_jam = (yy_current_state == 222);

    return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char *yy_bp)
{
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
    { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
        register char *source = &yy_current_buffer->yy_ch_buf[number_to_move];

        while (source > yy_current_buffer->yy_ch_buf)
            *--dest = *--source;

        yy_cp += (int)(dest - source);
        yy_bp += (int)(dest - source);
        yy_n_chars = yy_current_buffer->yy_buf_size;

        if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
            YY_FATAL_ERROR("flex scanner push-back overflow");
    }

    *--yy_cp = (char)c;

    if (c == '\n')
        --yylineno;

    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
}

int yyFlexLexer::yyinput()
{
    int c;

    *yy_c_buf_p = yy_hold_char;

    if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
        { /* need more input */
            yytext_ptr = yy_c_buf_p;
            ++yy_c_buf_p;

            switch (yy_get_next_buffer())
            {
            case EOB_ACT_END_OF_FILE:
            {
                if (yywrap())
                {
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                    return EOF;
                }

                if (!yy_did_buffer_switch_on_eof)
                    YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
            }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                break;

            case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
                YY_FATAL_ERROR("unexpected last match in yyinput()");
#else
                YY_FATAL_ERROR("unexpected last match in input()");
#endif
            }
        }
    }

    c = *(unsigned char *)yy_c_buf_p; /* cast for 8-bit char's */
    *yy_c_buf_p = '\0';               /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

    if (c == '\n')
        ++yylineno;

    return c;
}

void yyFlexLexer::yyrestart(istream *input_file)
{
    if (!yy_current_buffer)
        yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

    yy_init_buffer(yy_current_buffer, input_file);
    yy_load_buffer_state();
}

void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
    if (yy_current_buffer == new_buffer)
        return;

    if (yy_current_buffer)
    {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
    }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
}

YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(istream *file, int size)
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
    if (!b)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *)yy_flex_alloc(b->yy_buf_size + 2);
    if (!b->yy_ch_buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file);

    return b;
}

void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{
    if (!b)
        return;

    if (b == yy_current_buffer)
        yy_current_buffer = (YY_BUFFER_STATE)0;

    if (b->yy_is_our_buffer)
        yy_flex_free((void *)b->yy_ch_buf);

    yy_flex_free((void *)b);
}

extern "C" int isatty YY_PROTO((int));
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, istream *file)

{
    yy_flush_buffer(b);

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    b->yy_is_interactive = 0;
}

void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if (b == yy_current_buffer)
        yy_load_buffer_state();
}

#ifndef YY_NO_SCAN_BUFFER
#endif

#ifndef YY_NO_SCAN_STRING
#endif

#ifndef YY_NO_SCAN_BYTES
#endif

#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state(int new_state)
{
    if (yy_start_stack_ptr >= yy_start_stack_depth)
    {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof(int);

        if (!yy_start_stack)
            yy_start_stack = (int *)yy_flex_alloc(new_size);

        else
            yy_start_stack = (int *)yy_flex_realloc((void *)yy_start_stack, new_size);

        if (!yy_start_stack)
            YY_FATAL_ERROR("out of memory expanding start-condition stack");
    }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
}
#endif

#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
{
    if (--yy_start_stack_ptr < 0)
        YY_FATAL_ERROR("start-condition stack underflow");

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif

#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
{
    return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
    cerr << msg << '\n';
    exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                \
    do                                           \
    {                                            \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char;           \
        yy_c_buf_p = yytext + n - YY_MORE_ADJ;   \
        yy_hold_char = *yy_c_buf_p;              \
        *yy_c_buf_p = '\0';                      \
        yyleng = n;                              \
    } while (0)

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n) char *s1;
yyconst char *s2;
int n;
#endif
{
    register int i;
    for (i = 0; i < n; ++i)
        s1[i] = s2[i];
}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc(yy_size_t size)
#else
static void *yy_flex_alloc(size) yy_size_t size;
#endif
{
    return (void *)malloc(size);
}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc(void *ptr, yy_size_t size)
#else
static void *yy_flex_realloc(ptr, size) void *ptr;
yy_size_t size;
#endif
{
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *)realloc((char *)ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void *ptr)
#else
static void yy_flex_free(ptr) void *ptr;
#endif
{
    free(ptr);
}

#if YY_MAIN
int main()
{
    yylex();
    return 0;
}
#endif
#line 169 "lex.javascript.yy"
